openapi: 3.0.0
info:
  title: Note Api
  description: 'This is a RESTful note api that helps the user to impliment a note
    feature on their website or app. '
  contact:
    name: Bishwas Shrestha
    email: bishwas.shrestha@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0-oas3
servers:
- url: http://api.domainname.com/v1
- url: https://api.domainname.com/v1
tags:
- name: notes
  description: Access to Notes
- name: user
  description: Operations about user
  externalDocs:
    url: http://domainname.com
paths:
  /Users/:id:
    get:
      tags:
      - users
      summary: 'Finds user by id '
      description: Multiple status values can be provided with comma separated strings
      operationId: finduserbyid
      parameters:
      - name: status
        in: query
        description: Status values that need to be considered for filter
        required: true
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            default: available
            enum:
            - available
            - pending
            - sold
      responses:
        "200":
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Users'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Users'
        "400":
          description: Invalid id value
    put:
      tags:
      - users
      summary: 'Updates user '
      description: Multiple status values can be provided with comma separated strings
      operationId: updateUser
      parameters:
      - name: status
        in: query
        description: Status values that need to be considered for filter
        required: true
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            default: available
            enum:
            - available
            - pending
            - sold
      responses:
        "200":
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Users'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Users'
        "400":
          description: Invalid user value
    post:
      tags:
      - users
      summary: 'Posts user '
      description: Multiple status values can be provided with comma separated strings
      operationId: registerUser
      parameters:
      - name: status
        in: query
        description: Status values that need to be considered for filter
        required: true
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            default: available
            enum:
            - available
            - pending
            - sold
      responses:
        "200":
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Users'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Users'
        "400":
          description: Invalid user value
    delete:
      tags:
      - users
      summary: 'Deletes user '
      description: Multiple status values can be provided with comma separated strings
      operationId: deleteUser
      parameters:
      - name: status
        in: query
        description: Status values that need to be considered for filter
        required: true
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            default: available
            enum:
            - available
            - pending
            - sold
      responses:
        "200":
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Users'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Users'
        "400":
          description: Invalid user value
  /Notes/:id:
    get:
      tags:
      - notes
      summary: 'Gets note '
      description: Multiple status values can be provided with comma separated strings
      operationId: findNotebyid
      parameters:
      - name: status
        in: query
        description: Status values that need to be considered for filter
        required: true
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            default: available
            enum:
            - available
            - pending
            - sold
      responses:
        "200":
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notes'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notes'
        "400":
          description: Invalid user value
    post:
      tags:
      - notes
      summary: Posts note with new id
      description: Multiple status values can be provided with comma separated strings
      operationId: postNotebyid
      parameters:
      - name: status
        in: query
        description: Status values that need to be considered for filter
        required: true
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            default: available
            enum:
            - available
            - pending
            - sold
      responses:
        "200":
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notes'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notes'
        "400":
          description: Invalid note value
    delete:
      tags:
      - notes
      summary: Deletes note with given id
      description: Multiple status values can be provided with comma separated strings
      operationId: deleteNotebyid
      parameters:
      - name: status
        in: query
        description: Status values that need to be considered for filter
        required: true
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            default: available
            enum:
            - available
            - pending
            - sold
      responses:
        "200":
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notes'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notes'
        "400":
          description: Invalid note value
components:
  schemas:
    Users:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          description: User Status
          format: int32
      xml:
        name: User
    Notes:
      required:
      - name
      - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
        status:
          type: string
          description: notes status
          enum:
          - available
          - pending
          - sold
      xml:
        name: Note
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
